---
title: "Test Reveal Presentations"
author: "Julio"
subtitle: "Testing stuff"
echo: true
format: revealjs
---

## Empieza 

- Turn on Math
- $Ax=b$

- Cauchy-Shwarz

$$\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)$$ 

## More Math
:::: {.columns}

::: {.column width="60%"}
- A Cross Product Formula

$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}
  \mathbf{\hat i} &  \mathbf{\hat j} & \mathbf{\hat k} \\
  \frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\
  \frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0
  \end{vmatrix}  $$
:::

::: {.column width="40%"}
- The Lorenz Equations
$$
\begin{aligned}
  \dot{x} & = \sigma(y-x) \\
  \dot{y} & = \rho x - y - xz \\
  \dot{z} & = -\beta z + xy
  \end{aligned}
$$
:::

::::

## Julia

Example taken from <https://docs.makie.org/stable/>

```{julia}
#| echo: true
using GLMakie

Base.@kwdef mutable struct Lorenz
    dt::Float64 = 0.01
    σ::Float64 = 10
    ρ::Float64 = 28
    β::Float64 = 8/3
    x::Float64 = 1
    y::Float64 = 1
    z::Float64 = 1
end

function step!(l::Lorenz)
    dx = l.σ * (l.y - l.x)
    dy = l.x * (l.ρ - l.z) - l.y
    dz = l.x * l.y - l.β * l.z
    l.x += l.dt * dx
    l.y += l.dt * dy
    l.z += l.dt * dz
    Point3f(l.x, l.y, l.z)
end

attractor = Lorenz()

points = Observable(Point3f[])
colors = Observable(Int[])

set_theme!(theme_black())

fig, ax, l = lines(points, color = colors,
    colormap = :inferno, transparency = true,
    axis = (; type = Axis3, protrusions = (0, 0, 0, 0),
        viewmode = :fit, limits = (-30, 30, -30, 30, 0, 50)))

record(fig, "lorenz.mp4", 1:120) do frame
    for i in 1:50
        push!(points[], step!(attractor))
        push!(colors[], frame)
    end
    ax.azimuth[] = 1.7pi + 0.3 * sin(2pi * frame / 120)
    notify.((points, colors))
    l.colorrange = (0, frame)
end
```
## Lorenz Atractor {background-video="./lorenz.mp4"  background-video-loop="true"}


## Python

```{julia}
#| echo: true
using PyCall
plt = pyimport("matplotlib.pyplot")
x = range(0,2*pi,length=1000); y = sin.(3*x + 4*cos.(2*x));
       plt.plot(x, y, color="red", linewidth=2.0, linestyle="--")
       plt.show()
```

## Plotly

:::: {.columns}

::: {.column width="90%"}
```{python}
#| echo: true
#| output-location: slide
import plotly.express as px
import plotly.io as pio
df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", 
                 color="species", 
                 marginal_y="violin", marginal_x="box", 
                 trendline="ols", template="simple_white")
fig.show()
```
::: 

::::



